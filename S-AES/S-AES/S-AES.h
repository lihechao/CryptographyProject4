#ifndef SAES_H
#define SAES_H
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <conio.h>
typedef unsigned char BYTE;
typedef char HALFBYTE;	/*事实上半字节(用char型表示)与全字节(unsigned char)都是8位，
						但是由于没有4位的存储类型，所以用char表示半字节(仅用低四位)，与全字节进行区分*/
const HALFBYTE SBox[4][4]={							/*S盒*/
{0x9,0x4,0xA,0xB},		
{0xD,0x1,0x8,0x5},
{0x6,0x2,0x0,0x3},
{0xC,0xE,0xF,0x7}};
const HALFBYTE SBox_Inv[4][4]={						/*逆S盒*/
{0xA,0x5,0x9,0xB},		
{0x1,0x7,0x8,0xF},
{0x6,0x0,0x2,0x3},
{0xC,0x4,0xD,0xE}};
const HALFBYTE MultiplyTable[16][16]={				/*乘法表*/
{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0},
{0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
{0x0,0x2,0x4,0x6,0x8,0xA,0xC,0xE,0x3,0x1,0x7,0x5,0xB,0x9,0xF,0xD},
{0x0,0x3,0x6,0x5,0xC,0xF,0xA,0x9,0xB,0x8,0xD,0xE,0x7,0x4,0x1,0x2},
{0x0,0x4,0x8,0xC,0x3,0x7,0xB,0xF,0x6,0x2,0xE,0xA,0x5,0x1,0xD,0x9},
{0x0,0x5,0xA,0xF,0x7,0x2,0xD,0x8,0xE,0xB,0x4,0x1,0x9,0xC,0x3,0x6},
{0x0,0x6,0xC,0xA,0xB,0xD,0x7,0x1,0x5,0x3,0x9,0xF,0xE,0x8,0x2,0x4},
{0x0,0x7,0xE,0x9,0xF,0x8,0x1,0x6,0xD,0xA,0x3,0x4,0x2,0x5,0xC,0xB},
{0x0,0x8,0x3,0xB,0x6,0xE,0x5,0xD,0xC,0x4,0xF,0x7,0xA,0x2,0x9,0x1},
{0x0,0x9,0x1,0x8,0x2,0xB,0x3,0xA,0x4,0xD,0x5,0xC,0x6,0xF,0x7,0xE},
{0x0,0xA,0x7,0xD,0xE,0x4,0x9,0x3,0xF,0x5,0x8,0x2,0x1,0xB,0x6,0xC},
{0x0,0xB,0x5,0xE,0xA,0x1,0xF,0x4,0x7,0xC,0x2,0x9,0xD,0x6,0x8,0x3},
{0x0,0xC,0xB,0x7,0x5,0x9,0xE,0x2,0xA,0x6,0x1,0xD,0xF,0x3,0x4,0x8},
{0x0,0xD,0x9,0x4,0x1,0xC,0x8,0x5,0x2,0xF,0xB,0x6,0x3,0xE,0xA,0x7},
{0x0,0xE,0xF,0x1,0xD,0x3,0x2,0xC,0x9,0x7,0x6,0x8,0x4,0xA,0xB,0x5},
{0x0,0xF,0xD,0x2,0x9,0x6,0x4,0xB,0x1,0xE,0xC,0x3,0x8,0x7,0x5,0xA},
};
const BYTE RCon[2]={0x80,0x30};/*密钥扩展中的轮常数*/
void Extend_Key(const BYTE Key[2],BYTE RoundKey[6]);/*密钥扩展*/
BYTE SubNib(BYTE Byte);/*用于密钥扩展的字节代替*/
void SubHalfByte(HALFBYTE State[2][2],const HALFBYTE Table[4][4]);
void ShiftRows(HALFBYTE State[2][2]);/*行移位*/
void MixColumns(HALFBYTE State[2][2]);/*列混淆*/
void MixColumnsInverse(HALFBYTE State[2][2]);/*列混淆求逆*/
void AddRoundKey(HALFBYTE State[2][2],const BYTE RoundKey[],BYTE RoundNum);/*轮密钥加*/
BYTE ByteRol(BYTE Byte,BYTE Times);/*在一个字节内进行循环左移的位操作*/
void EncryptBlock(const BYTE PlainText[2],const BYTE RoundKey[6],BYTE CipherText[2]);/*加密一个分组16位数据*/
void DecryptBlock(const BYTE CipherText[2],const BYTE RoundKey[6],BYTE PlainText[2]);/*解密一个分组16位数据*/
void EncryptFile(FILE *PlainFile,const BYTE Key[2],FILE *CipherFile);/*加密文件*/
void DecryptFile(FILE *CipherFile,const BYTE Key[2],FILE *PlainFile);/*解密文件*/
#endif